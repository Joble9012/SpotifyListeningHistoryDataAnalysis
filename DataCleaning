import os
import json
import pandas as pd

# Folder where JSON files are stored
json_folder_path = "/Users/joblethomas/Desktop/SpotifyListeningHistoryDataAnalysis/RawData"  # <-- Change this to your actual folder path

# Output file path
output_folder = "/Users/joblethomas/Desktop/SpotifyListeningHistoryDataAnalysis"
output_file = "CleanData.csv"
output_path = os.path.join(output_folder, output_file)

# Delete existing CleanData.csv if it exists
if os.path.exists(output_path):
    os.remove(output_path)
    print(f"Existing file deleted: {output_path}")

# List to store all listening history records
all_data = []

# Loop through all JSON files in the folder
for filename in os.listdir(json_folder_path):
    if filename.endswith('.json'):
        file_path = os.path.join(json_folder_path, filename)
        with open(file_path, 'r', encoding='utf-8') as f:
            try:
                data = json.load(f)
                all_data.extend(data)
            except json.JSONDecodeError:
                print(f"Skipping invalid JSON file: {filename}")

# Convert the combined data to a pandas DataFrame
df = pd.DataFrame(all_data)

# Columns to remove
columns_to_drop = [
    'platform', 'conn_country', 'ip_addr',
    'spotify_track_uri', 'spotify_episode_uri',
    'episode_name', 'episode_show_name',
    'audiobook_title', 'audiobook_uri',
    'audiobook_chapter_uri', 'audiobook_chapter_title',
    'incognito_mode','offline_timestamp', 'offline'
]

# Drop the unwanted columns if they exist
df.drop(columns=[col for col in columns_to_drop if col in df.columns], inplace=True)

# Rename selected columns
df.rename(columns={
    'ts': 'timestamp',
    'master_metadata_track_name': 'track_name',
    'master_metadata_album_artist_name': 'artist_name',
    'master_metadata_album_album_name': 'album_name',
    'ms_played': 'minutes_played'
}, inplace=True)

# Remove rows where track_name is 'White Noise 3 Hour Long'
df = df[df['track_name'] != 'White Noise 3 Hour Long']

# Convert timestamp to datetime format
df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')

# Remove timezone info
df['timestamp'] = df['timestamp'].dt.tz_localize(None)

# Filter rows from 2018 onwards
df = df[df['timestamp'].dt.year >= 2018]

# Convert milliseconds to minutes
if 'minutes_played' in df.columns:
    df['minutes_played'] = df['minutes_played'] / 1000 / 60

# Drop rows where core metadata is missing
df.dropna(subset=['track_name', 'artist_name', 'album_name'], inplace=True)

# Save to CSV
df.to_csv(output_path, index=False)

print(f"Combined CSV saved as: {output_path}")
